
[{"content":" Introduction # For my rocket that I created for the American Rocketry Challenge, I decided to go the route of actively controlling the flight of my rocket to reach the target altitude. To do this, I am using the approach of adding airbrakes to the rocket that deploy during the flight and increase the drag to slow the rocket down. The rocket uses a motor that would take it above the target altitude, and then in flight it is slowed down until it reaches the correct maximum height.\nI went through many iterations to varying levels of completion. Some I scrapped after just a little bit of CAD work and others I created and even flew with before moving on.\nDesign Requirements # There were several things that I was looking for in a good airbrake design including\nSmall size Low weight Large active surface area for maximum drag Fast actuation time Low mechanism friction Minimum failure points Designs # V1 This design did not go very far, and was mostly a test to see how the servo I would be using would fit into the rocket tube. With the flap design, this approach has a large effective surface area and takes up little space inside the rocket, but with the orientation of the servo only a smaller, less powerful version is able to fit. The servo would also have to be realtively strong in this approach to push open the flaps in flight. V2 This design seemed good in theory and I mostly modeled it, but when I started to print test parts I realized that it was too small and intricate and abandoned it. This design allows for a larger, more powerful servo while still using flaps with a large surface area but there are too many small parts for it to work at this scale. There would also likely be quite a bit of friction between the many joints increasing the load on the servo and adding additional points of failure. V3 After trying to think of ways to keep the large flap design with a vertical servo, I decided to try something new. This design allowed me to keep the larger servo and used an Archimedean spiral to convert the rotational motion of the servo into translational motion of the flaps. This design seemed promising, and I ended up printing it and using it on a version of my rocket. I ran into issues with there being too much friction in the system for the servo to overcome. V4 In this design, I attempted a similar idea of using a vertical servo and instead of converting the motion to linear, I kept it as rotational. This helped to remove most of the friction in the system and made the airbrakes very easy for the servo to open and close. At first, I used metal bearings to help the flaps spin but these ended up to be too heavy and I opted for 3D printed options with metal bearing balls instead. Overall, the design of these worked well and the opened and closed easily. After running some simulations, I was worried about the surface area that these had. I ended up needing more surface area than this to get the effect that I wanted and slow down the rocket enough. V5 This was my final design, and I went back to a similar approach of that in V1. I was able to put the servo closer to the center and fit a larger one in, and after getting the gears working there was not too much friction. I flew this on several rockets, and I was able to get it to deploy once. This design allows for a much greater surface area with the flaps, and overall works well. I'm sure that there are use cases for many of these designs, but with the space, weight and complexity restrictions, this worked the best for me. ","date":"30 September 2025","externalUrl":null,"permalink":"/projects/airbrakes/","section":"Projects","summary":"","title":"3D Printed Airbrakes for a Model Rocket","type":"projects"},{"content":"","date":"30 September 2025","externalUrl":null,"permalink":"/tags/3d-printing/","section":"Tags","summary":"","title":"3D Printing","type":"tags"},{"content":"","date":"30 September 2025","externalUrl":null,"permalink":"/","section":"Ben Jaynes","summary":"","title":"Ben Jaynes","type":"page"},{"content":"","date":"30 September 2025","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects","type":"projects"},{"content":"","date":"30 September 2025","externalUrl":null,"permalink":"/tags/rocketry/","section":"Tags","summary":"","title":"Rocketry","type":"tags"},{"content":"","date":"30 September 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" Introduction # For the American Rocketry Challenge, you are tasked to create a rocket that can carry an egg to a specific altitude and get it back down within a set time goal. These rockets are pretty small, and because of this my rocket is entierly 3D printed.\nSince every part is 3D printed, the rocket has to be split up into several different sections and assembled together. One of the challeneges with this is finding a way to join these sections together. My goal was to design a connector that is:\nStrong Fast to connect Minimal hardware Printable in both orientations Small footprint Revisions # The first approach that I tried was inspired by this thread that I found. I designed a similar connector and used it for a few launches.\nThis connector was strong, printable in both orientations and had a relatively small footprint, but it needed 2-4 screws and took a while to assemble or disassemble the rocket. When you are taking the rocket apart and putting it back together to get the avionics ready, put the egg in, weigh it and more, this can get pretty annoying.\nI tried a few other designs, but none of them worked very well.\nFinal Design # Eventually, I landed on a design where you slot the two halves together and then turn a little bit to lock them together. To keep the two halves from coming apart, I used one plastic rivet from apogee components.\nI\u0026rsquo;m sure there are other things that could be used other than a plastic rivet, but I had access to those and it has worked pretty well for me so far.\nOnce I dialed in the tolerances this design was both strong and very quick to connect and disconnect. While the top half is only printable in one orientation, the bottom half can print in either and it hasn\u0026rsquo;t been a problem for me yet.\n","date":"28 September 2025","externalUrl":null,"permalink":"/projects/section-connector/","section":"Projects","summary":"","title":"3D Printed Rocket Section Connector","type":"projects"},{"content":" ","date":"12 September 2025","externalUrl":null,"permalink":"/gallery/","section":"Ben Jaynes","summary":"","title":"Gallery","type":"page"},{"content":"","date":"12 April 2025","externalUrl":null,"permalink":"/tags/example/","section":"Tags","summary":"","title":"Example","type":"tags"},{"content":" Introduction # This is the first iteration of the control board that I designed and assembled myself. It is meant to record data and control a model rocket during its flight to help it reach the desired altitude.\nComponents # For the main processor I decided to use the ATSAMD21 microcontroller. This was mostly because it was pretty powerful, came in a QFP package and has been used in many arduino and other open source boards.\nSome of the other components that I needed included:\nComponent IC Used Barometer BMP388 Accelerometer/Gyroscope LSM6DS3TR and ICM-20689 SD card tray Clamshell Tray Power management L78L05ABUTR and AP2112K-3.3 Servo header 3-pin Header Backup NAND flash W25Q64JVSSIQ I decided to use two accelerometer/gyroscopes because the LSM6DS3TR is widely used with great support, but not quite as accurate as the ICM-20689. I was able to get both working, and in the end there wasn\u0026rsquo;t much need for the LSM6DS3TR other than to confirm the data seen in the main gyro/acc.\nI also added a NAND flash with the idea that I could write to it as well as the SD card during the flight in case something happened to the SD card, but There was never much need to use it and after verifying that it worked I never implemented it in the code.\nDesign # I used Kicad to create the schematic and board layout.\npdf Board Bringup # Once the soldering was done, I had to burn a bootloader onto the board. I exposed the pins for serial wire debug, which is what I used to do this. Normally, you have to use another board with a ATSAMD21 processor to burn the bootloader, but I was able to use a Raspberry Pi Pico since their microcontrollers are similar enough. This allowed me to flash the bootloader and then use the MicroUSB port to upload code.\nAt first, some of the chips were not detected but I was able to fix all of these problems by reflowing them again and fixing some soldering joints. Eventually I was able to get all of the peripherals on the board working and recording data.\n","date":"12 April 2025","externalUrl":null,"permalink":"/projects/rocket-board-v1/","section":"Projects","summary":"","title":"Rocket Board V1","type":"projects"},{"content":"","date":"12 April 2025","externalUrl":null,"permalink":"/tags/tag/","section":"Tags","summary":"","title":"Tag","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]